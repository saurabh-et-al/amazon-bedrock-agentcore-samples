AWSTemplateFormatVersion: "2010-09-09"
Description: "Comprehensive CloudFormation template for AsanaIntegrationDemo System with Lambda, API Gateway, DynamoDB tables, IAM roles, and SSM parameters"

Parameters:
  UserPoolName:
    Type: String
    Default: "AsanaIntegrationDemoGatewayPool"
    Description: "Name of the Cognito User Pool"

  MachineAppClientName:
    Type: String
    Default: "AsanaIntegrationDemoMachineClient"
    Description: "Name of the Cognito User Pool Application Client"

  WebAppClientName:
    Type: String
    Default: "AsanaIntegrationDemoWebClient"
    Description: "Name of the Cognito User Pool Web Application Client"

Resources:
  # ===== API GATEWAY AND LAMBDA SECTION =====

  # Lambda Execution Role for API
  AsanaIntegrationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AsanaIntegrationLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # Dead Letter Queue for Lambda function
  AsanaIntegrationLambdaDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: AsanaIntegrationLambda-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      KmsMasterKeyId: alias/aws/sqs

  # Lambda Function for API
  AsanaIntegrationApiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AgentCoreGwyAsanaIntegrationDemo
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt AsanaIntegrationLambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      ReservedConcurrentExecutions: 10 # Limit concurrent executions
      DeadLetterConfig:
        TargetArn: !GetAtt AsanaIntegrationLambdaDLQ.Arn
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import json
          import os
          import logging
          from typing import Dict, Any

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
              """
              Lambda function handler for Asana Integration Demo
              
              Args:
                  event: API Gateway event
                  context: Lambda context
                  
              Returns:
                  API Gateway response
              """
              try:
                  # Validate event structure
                  if not isinstance(event, dict):
                      logger.error("Invalid event structure received")
                      return create_response(400, {'error': 'Invalid request format'})
                  
                  # Log minimal event info (avoid logging sensitive data)
                  logger.info(f"Processing request - Method: {event.get('httpMethod', 'UNKNOWN')}, Path: {event.get('path', 'UNKNOWN')}")
                  
                  # Get HTTP method and path with validation
                  http_method = event.get('httpMethod', '').upper()
                  path = event.get('path', '')
                  
                  # Validate required fields
                  if not http_method or not path:
                      logger.error("Missing required fields in event")
                      return create_response(400, {'error': 'Invalid request structure'})
                  
                  # Route based on method and path
                  if http_method == 'GET' and path == '/asana':
                      return handle_get_request(event)
                  elif http_method == 'POST' and path == '/asana':
                      return handle_post_request(event)
                  else:
                      logger.warning(f"Unsupported endpoint: {http_method} {path}")
                      return create_response(404, {'error': 'Not Found'})
                      
              except Exception as e:
                  logger.error(f"Error processing request: {str(e)}")
                  return create_response(500, {'error': 'Internal Server Error'})

          def handle_get_request(event: Dict[str, Any]) -> Dict[str, Any]:
              """Handle GET requests to /asana endpoint"""
              
              # Get query parameters
              query_params = event.get('queryStringParameters') or {}
              
              response_data = {
                  'message': 'AgentCore Asana Integration Demo',
                  'status': 'active',
                  'method': 'GET',
                  'endpoint': '/asana',
                  'query_params': query_params
              }
              
              return create_response(200, response_data)

          def handle_post_request(event: Dict[str, Any]) -> Dict[str, Any]:
              """Handle POST requests to /asana endpoint"""
              
              try:
                  # Parse request body with size validation
                  body = event.get('body', '{}')
                  
                  # Validate body size (prevent large payloads)
                  if isinstance(body, str) and len(body) > 1024 * 1024:  # 1MB limit
                      logger.error("Request body too large")
                      return create_response(413, {'error': 'Request body too large'})
                  
                  if isinstance(body, str):
                      if not body.strip():
                          post_data = {}
                      else:
                          post_data = json.loads(body)
                  else:
                      post_data = body if body else {}
                  
                  # Validate post_data structure
                  if not isinstance(post_data, dict):
                      logger.error("POST data must be a JSON object")
                      return create_response(400, {'error': 'Request body must be a JSON object'})
                  
                  # Validate required fields
                  tool_name = post_data.get('tool_name')
                  if not tool_name or not isinstance(tool_name, str):
                      logger.error("Missing or invalid tool_name")
                      return create_response(400, {'error': 'tool_name is required and must be a string'})
                  
                  # Sanitize tool_name (basic validation)
                  if not tool_name.replace('_', '').replace('-', '').isalnum():
                      logger.error("Invalid tool_name format")
                      return create_response(400, {'error': 'tool_name contains invalid characters'})
                  
                  # Log minimal info (avoid logging sensitive data)
                  logger.info(f"Processing tool: {tool_name}")
                  
                  # Validate headers for bearer token
                  headers = event.get('headers', {})
                  asana_token = headers.get('X-Asana-Token') or headers.get('x-asana-token')
                  
                  if not asana_token:
                      logger.error("Missing X-Asana-Token header")
                      return create_response(401, {'error': 'X-Asana-Token header is required'})
                  
                  # Process POST data (placeholder for actual integration logic)
                  response_data = {
                      'message': 'POST request processed successfully',
                      'method': 'POST',
                      'endpoint': '/asana',
                      'processed': True,
                      'tool_name': tool_name,
                      'timestamp': context.aws_request_id if context else 'unknown'
                  }
                  
                  return create_response(200, response_data)
                  
              except json.JSONDecodeError as e:
                  logger.error(f"Invalid JSON in POST body: {str(e)}")
                  return create_response(400, {'error': 'Invalid JSON format'})
              except Exception as e:
                  logger.error(f"Error processing POST request: {str(e)}")
                  return create_response(500, {'error': 'Internal server error'})

          def create_response(status_code: int, body: Dict[str, Any]) -> Dict[str, Any]:
              """Create standardized API Gateway response with security headers"""
              
              return {
                  'statusCode': status_code,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*',  # Consider restricting in production
                      'Access-Control-Allow-Headers': 'Content-Type,X-Asana-Token,Authorization',
                      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
                      'X-Content-Type-Options': 'nosniff',
                      'X-Frame-Options': 'DENY',
                      'X-XSS-Protection': '1; mode=block',
                      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
                      'Cache-Control': 'no-cache, no-store, must-revalidate',
                      'Pragma': 'no-cache',
                      'Expires': '0'
                  },
                  'body': json.dumps(body, separators=(',', ':'))  # Compact JSON
              }

  # API Gateway
  AsanaIntegrationApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AsanaIntegrationDemoApi
      Description: API Gateway for Asana Integration Demo
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  AsanaResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AsanaIntegrationApiGateway
      ParentId: !GetAtt AsanaIntegrationApiGateway.RootResourceId
      PathPart: asana

  # API Gateway Authorizer
  AsanaApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: AsanaApiKeyAuthorizer
      Type: REQUEST
      RestApiId: !Ref AsanaIntegrationApiGateway
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AsanaAuthorizerFunction.Arn}/invocations"
      AuthorizerCredentials: !GetAtt AsanaAuthorizerRole.Arn
      IdentitySource: method.request.header.x-api-key

  # Authorizer Lambda Function
  AsanaAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AsanaApiAuthorizer
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt AsanaAuthorizerRole.Arn
      Timeout: 10
      Code:
        ZipFile: |
          import json
          import os

          def lambda_handler(event, context):
              try:
                  # Get the API key from headers
                  api_key = event.get('headers', {}).get('x-api-key')
                  
                  if not api_key:
                      raise Exception('Unauthorized')
                  
                  # In production, validate against stored API keys
                  # For demo, we'll allow any non-empty key
                  if len(api_key) < 10:
                      raise Exception('Unauthorized')
                  
                  # Generate policy
                  policy = {
                      'principalId': 'api-key-user',
                      'policyDocument': {
                          'Version': '2012-10-17',
                          'Statement': [
                              {
                                  'Action': 'execute-api:Invoke',
                                  'Effect': 'Allow',
                                  'Resource': event['methodArn']
                              }
                          ]
                      }
                  }
                  
                  return policy
                  
              except Exception as e:
                  raise Exception('Unauthorized')

  # Authorizer Role
  AsanaAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # GET Method with API Key Authorization
  AsanaGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AsanaIntegrationApiGateway
      ResourceId: !Ref AsanaResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AsanaApiAuthorizer
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AsanaIntegrationApiLambdaFunction.Arn}/invocations"

  # POST Method with API Key Authorization
  AsanaPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AsanaIntegrationApiGateway
      ResourceId: !Ref AsanaResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AsanaApiAuthorizer
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AsanaIntegrationApiLambdaFunction.Arn}/invocations"

  # Lambda Permission for API Gateway
  AsanaLambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AsanaIntegrationApiLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AsanaIntegrationApiGateway}/*/GET/asana"

  AsanaLambdaApiGatewayPermissionPost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AsanaIntegrationApiLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AsanaIntegrationApiGateway}/*/POST/asana"

  # Permission for Authorizer Lambda
  AsanaAuthorizerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AsanaAuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AsanaIntegrationApiGateway}/authorizers/*"

  # CloudWatch Log Group for API Gateway Access Logs
  AsanaApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AsanaIntegrationApiGateway}"
      RetentionInDays: 30

  # API Gateway Deployment
  AsanaApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AsanaGetMethod
      - AsanaPostMethod
    Properties:
      RestApiId: !Ref AsanaIntegrationApiGateway
      StageName: Prod
      StageDescription: Production stage with access logging
      AccessLogSetting:
        DestinationArn: !GetAtt AsanaApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: false
          MetricsEnabled: true
          ThrottlingRateLimit: 100
          ThrottlingBurstLimit: 200

  # API Key for AsanaIntegrationApiGateway
  AsanaIntegrationApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: AsanaIntegrationDemoApiKey
      Description: API Key for Asana Integration Demo API Gateway
      Enabled: true

  # Usage Plan for API Key
  AsanaIntegrationUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: AsanaApiDeployment
    Properties:
      UsagePlanName: AsanaIntegrationDemoUsagePlan
      Description: Usage plan for Asana Integration Demo API
      ApiStages:
        - ApiId: !Ref AsanaIntegrationApiGateway
          Stage: Prod
      Throttle:
        RateLimit: 100 # Reduced from 1000 for better security
        BurstLimit: 200 # Reduced from 2000 for better security
      Quota:
        Limit: 1000 # Reduced from 10000 for better security
        Period: DAY

  # Link API Key to Usage Plan
  AsanaIntegrationUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref AsanaIntegrationApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref AsanaIntegrationUsagePlan

  # ===== AGENTCORE IAM ROLES SECTION =====

  # Gateway AgentCore Role
  GatewayAgentCoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AssumeRolePolicy
            Effect: Allow
            Principal:
              Service: bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:*
      Policies:
        - PolicyName: AsanaIntegrationDemoGatewayAgentCorePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ECRImageAccess
                Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/bedrock_agentcore-asanaintegrationdemo*
              - Sid: BedrockAgentCoreAccess
                Effect: Allow
                Action:
                  - bedrock-agentcore:GetGateway
                  - bedrock-agentcore:ListGateways
                  - bedrock-agentcore:GetGatewayTarget
                  - bedrock-agentcore:ListGatewayTargets
                  - bedrock-agentcore:InvokeGateway
                Resource:
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:gateway/*
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:gateway-target/*
              - Sid: ProvisionedThroughputModelInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: arn:aws:bedrock:*::foundation-model/*
              - Sid: GetSSMParameters
                Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app/asana/demo/agentcoregwy/*
              - Sid: Identity
                Effect: Allow
                Action:
                  - bedrock-agentcore:GetResourceOauth2Token
                Resource:
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:token-vault/default/oauth2credentialprovider/*
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:workload-identity-directory/default/workload-identity/*
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:workload-identity-directory/default
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:token-vault/default
              - Sid: SecretsManagerAccessPolicy
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:asana_integration_demo_agent*

  # Runtime AgentCore Role
  RuntimeAgentCoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AssumeRolePolicy
            Effect: Allow
            Principal:
              Service: bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:*
      Policies:
        - PolicyName: AsanaIntegrationDemoAgentCoreRuntimePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LambdaInvoke
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt AsanaIntegrationApiLambdaFunction.Arn

  # ===== SSM PARAMETERS SECTION =====
  GatewayAgentcoreIAMRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/asana/demo/agentcoregwy/gateway_iam_role
      Type: String
      Value: !GetAtt GatewayAgentCoreRole.Arn
      Description: agentcore IAM role to assume
      Tags:
        Application: AsanaIntegrationDemo

  RuntimeAgentcoreIAMRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/asana/demo/agentcoregwy/runtime_iam_role
      Type: String
      Value: !GetAtt RuntimeAgentCoreRole.Arn
      Description: agentcore IAM role to assume
      Tags:
        Application: AsanaIntegrationDemo

  LambdaArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/asana/demo/agentcoregwy/lambda_arn
      Type: String
      Value: !GetAtt AsanaIntegrationApiLambdaFunction.Arn
      Description: ARN of the lambda that integrates with agentcore
      Tags:
        Application: AsanaIntegrationDemo

  APIGatewayURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/asana/demo/agentcoregwy/apigateway_url
      Type: String
      Value: !Sub "https://${AsanaIntegrationApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Description: URL of the API Gateway for 3rd party integration
      Tags:
        Application: AsanaIntegrationDemo

  APIKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/asana/demo/agentcoregwy/api_key
      Type: String
      Value: !Ref AsanaIntegrationApiKey
      Description: API Key for Asana Integration Demo API Gateway
      Tags:
        Application: AsanaIntegrationDemo

Outputs:
  # API Gateway Outputs
  AsanaIntegrationApiUrl:
    Description: "API Gateway endpoint URL for Asana Integration function"
    Value: !Sub "https://${AsanaIntegrationApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${AWS::StackName}-AsanaIntegrationApiUrl"

  AsanaIntegrationApiLambdaFunctionArn:
    Description: "Asana Integration Lambda Function ARN"
    Value: !GetAtt AsanaIntegrationApiLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AsanaIntegrationApiLambdaFunctionArn"

  # IAM Role Outputs
  GatewayAgentCoreRoleArn:
    Description: "Gateway AgentCore IAM Role ARN"
    Value: !GetAtt GatewayAgentCoreRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GatewayAgentCoreRoleArn"

  RuntimeAgentCoreRoleArn:
    Description: "Runtime AgentCore IAM Role ARN"
    Value: !GetAtt RuntimeAgentCoreRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RuntimeAgentCoreRoleArn"

  AsanaIntegrationApiKey:
    Description: "API Key for Asana Integration Demo API Gateway"
    Value: !Ref AsanaIntegrationApiKey
    Export:
      Name: !Sub "${AWS::StackName}-AsanaIntegrationApiKey"
